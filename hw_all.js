


// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================


// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================


// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================


// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================


// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// const name = prompt('FIO');
//  let userName = name ?  name : 'anonimus';
// console.log(userName);
// ==================================================================================

// ==================================================================================
// Напиши функцию calculateTotalPrice(order), которая принимает один параметр order -
// массив чисел, и рассчитывает общую сумму его элементов.Общая сумма элементов должна
// сохраняться в переменной total, которая возвращается, как результат работы функции.
// ----------------------------------------------------------------------------------
// function calculateTotalPrice(order) {
//   let total = 0;
// for (let i = 0; i < order.length; i+=1) {
//   total += order[i];
// }
//   return total;
// }
// ==================================================================================

// ==================================================================================
// Напиши функцию findLongestWord(string) которая принимает произвольную строку
// состоящую только из слов разделённых пробелом(параметр string) и возвращает
// самое длинное слово в этой строке.
// ----------------------------------------------------------------------------------
// function findLongestWord (string) {
//     const stringSplit = string.split(' ');
//     let longestWord = "";

//     for (const word of stringSplit) {
//         if (word.length > longestWord.length) {
//             longestWord = word;
//         }
//     }
//     return longestWord;
// }
// ----------------------------------------------------------------------------------
// function findLongestWord(string) {
//  return string.split(' ').reduce((a, b) => (b.length > a.length) ? b : a);
// };
// ==================================================================================

// ==================================================================================
//Дополни код функции createArrayOfNumbers(min, max) так, чтобы она возвращала массив всех целых чисел от значения min до max.
// ----------------------------------------------------------------------------------
// function createArrayOfNumbers(min, max) {
//   const numbers = [];
//     for (let i = min; i <= max; i++) {
//         numbers.push(i);
//     }
//   return numbers;
// }
// ==================================================================================

// ==================================================================================
//Напиши функцию filterArray(numbers, value), которая принимает массив чисел (параметр
// numbers) и возвращает новый массив, в котором будут только те элементы массива numbers,
// которые больше чем значение параметра value(число).
// ----------------------------------------------------------------------------------
// function filterArray(numbers, value) {
//     const newNumbers = [];
//     for (element of numbers) {
//         if (element > value) {
//             newNumbers.push(element);
//         }
//     }
//     return newNumbers
// }
// ----------------------------------------------------------------------------------
// function filterArray(numbers, value) {
//     return numbers.filter(number => number > value);
// }
// ==================================================================================

// ==================================================================================
//Функция checkFruit(fruit) принимает строку с названием фрукта (параметр fruit), и проверяет есть ли такой фрукт в массиве fruits.
// Дополни код функции так, что если:
// фрукт есть в массиве, то функция возвращает true;
// фрукта нет в массиве, то функция возвращает false.
// ----------------------------------------------------------------------------------
// function checkFruit(fruit) {
//   const fruits = ["apple", "plum", "pear", "orange"];

//   return fruits.includes(fruit); // Change this line
// }
// ==================================================================================

// ==================================================================================
//Общими элементами массивов называют те элементы, которые присутствуют во всех массивах.
// Например, в двух массивах[1, 3, 5] и[0, 8, 5, 3] общими будут числа 3 и 5, т.к.они
// присутствуют в обоих исходных массивах.А числа 0, 1 и 8 присутствуют только в одном из массивов.
// Напиши функцию getCommonElements(array1, array2) которая получает два массива произвольной
// длины в параметры array1 и array2, и возвращает новый массив, состоящий из тех элементов,
// которые присутствуют в обоих исходных массивах.
// ---------------------------------------------------------------------------------
// function getCommonElements(array1, array2) {
//     const array3 = [];
//     for (const element of array1) {
//         array2.includes(element) ? array3.push(element) : '';
//     }        return array3;
// }
// console.log(getCommonElements([10, 20, 30, 40], [4, 30, 17, 10, 40]));
// ---------------------------------------------------------------------------------
// function getCommonElements(array1, array2) {
//     const array3 = [];
//     for (element of array1) {
//         array2.includes(element) ? array3.push(element) : '';
//     }        return array3;
// }
// console.log(getCommonElements([10, 20, 30, 40], [4, 30, 17, 10, 40]));
// ----------------------------------------------------------------------------------
// function getCommonElements(array1, array2) {
//     const array3 = [];
//     for (element of array1) {
//         if (array2.includes(element)) {
//             array3.push(element);
//         }
//     }        return array3;
// }
// console.log(getCommonElements([10, 20, 30, 40], [4, 30, 17, 10, 40]));
// ----------------------------------------------------------------------------------
// function getCommonElements(array1, array2) {
//     const array3 = [];
//     for (element of array1) {
//         for (element2 of array2) {
//             if (element === element2) {
//                 array3.push(element);
//             }
//         }
//     }
//     return array3;
// }
// console.log(getCommonElements([10, 20, 30, 40], [4, 30, 17, 10, 40]));
// ==================================================================================

// ==================================================================================
//Выполни рефакторинг кода функции calculateTotalPrice(order) заменив цикл for на for...of.
// ----------------------------------------------------------------------------------
// function calculateTotalPrice(order) {
//   let total = 0;
//   for (element of order) {
//     total += element;
//   }
//   return total;
// }
// ==================================================================================

// ==================================================================================
//Выполни рефакторинг функции filterArray(numbers, value) заменив цикл for на for...of.
// ----------------------------------------------------------------------------------
// function filterArray(numbers, value) {
//   // Change code below this line
//   const filteredNumbers = [];

//   for (let i = 0; i < numbers.length; i += 1) {
//     const number = numbers[i];

//     if (number > value) {
//       filteredNumbers.push(number);
//     }
//   }

//   return filteredNumbers;
//   // Change code above this line
// }
// // ----------------------------------------------------------------------------------
// function filterArray(numbers, value) {
//   // Change code below this line
//   const filteredNumbers = [];

//   for (element of numbers) {
//     const number = element;

//     if (number > value) {
//       filteredNumbers.push(number);
//     }
//   }

//   return filteredNumbers;
//   // Change code above this line
// }
// ==================================================================================

// ==================================================================================
//Напиши функцию getEvenNumbers(start, end) которая возвращает массив всех чётных чисел
// от start до end.Чётным считается число которое делится на 2 без остатка(10 % 2 === 0).
// ----------------------------------------------------------------------------------
// function getEvenNumbers(start, end) {
//     const arr = [];
//     for (let i = start; i <= end; i++) {
//         if (i % 2 === 0) {
//             arr.push(i);
//         }
//     }
//     return arr;
// }

// console.log(getEvenNumbers(3, 11));
// ==================================================================================

// ==================================================================================
//Дополни код так, чтобы в переменную number записывалось первое число от start до end, которое делится на 5 без остатка.
// ----------------------------------------------------------------------------------
// const start = 6;
// const end = 27;
// let number;

// for (let i = start; i < end; i += 1) {
//   if (i % 5 === 0) {
//     number = i;
//     break;
//   }
// }
// ==================================================================================

// ==================================================================================
// //Выполни рефакторинг функции findNumber(start, end, divisor) так, чтобы она:

// возвращала первое число от start до end, которое делится на divisor без остатка
// не использовала оператор break
// не использовала переменную number
// ----------------------------------------------------------------------------------
// function findNumber(start, end, divisor) {
//   // Change code below this line

//   for (let i = start; i < end; i += 1) {
//     if (i % divisor === 0) {
//   return i;
//     }
//   }


//   // Change code above this line
// }
// ==================================================================================

// ==================================================================================
// //Напиши функцию includes(array, value), которая делает тоже самое, что и метод массива массив.includes(значение) -
// проверяет, есть ли в массиве array значение value, возвращая true если есть и false в противном случае.
// При выполнении этой задачи в теле функции includes() нельзя использовать метод массив.includes(значение).
// ----------------------------------------------------------------------------------
// function includes(array, value) {
//     for (let element of array) {
//     if (element === value) {
//         return true;
//         }
//     }
//             return false;
// }

// console.log(includes(["Earth", "Mars", "Venus", "Jupiter", "Saturn"], "Jupiter"));
// ==================================================================================


// ==================================================================================
//Перебери объект apartment используя цикл for...in и запиши в массив keys все его ключи, а в массив values все значения его свойств.
// ----------------------------------------------------------------------------------
// const apartment = {
//   descr: "Spacious apartment in the city center",
//   rating: 4,
//   price: 2153,
// };
// const keys = [];
// const values = [];
// for (const key in apartment){

//     keys.push(key);
//     values.push(apartment[key]);
// }
// ==================================================================================

// ==================================================================================
// //Метод Object.create(animal) создаёт и возвращает новый объект, связывая его с объектом animal.
//  Поэтому можно получить значение свойства legs обратившись к нему как dog.legs, хотя его нет в
//  объекте dog - это несобственное свойство из объекта animal.

// Оператор in, который используется в цикле for...in, не делает различия между собственными
// и несобственными свойствами объекта.Эта особенность мешает, так как мы всегда хотим перебрать
// только собственные свойства.Для того чтобы узнать есть в объекте собственное свойство или нет,
//     используется метод hasOwnProperty(key), который возвращает true или false.
// Выполни рефакторинг решения предыдущего задания добавив в цикл for...in проверку на собственное свойство.
// ----------------------------------------------------------------------------------
// const keys = [];
// const values = [];
// const advert = {
//   service: "apt",
// };
// const apartment = Object.create(advert);
// apartment.descr = "Spacious apartment in the city center";
// apartment.rating = 4;
// apartment.price = 2153;

// for (const key in apartment) {
//   // Change code below this line
// if (apartment.hasOwnProperty(key)){
//   keys.push(key);
//   values.push(apartment[key]);
// };
//   // Change code above this line
// }
// ==================================================================================

// ==================================================================================
//Напиши функцию countProps(object), которая считает и возвращает количество собственных
// свойств объекта в параметре object.Используй переменную propCount для хранения
// количества свойств объекта.
// ----------------------------------------------------------------------------------
// function countProps(object) {
//   let propCount = 0;
//     for (const key in object) {
//         if (object.hasOwnProperty(key)) {
//             propCount++;
//         }
//     }
//      return propCount;
// };


// console.log(countProps({}));
// console.log(countProps({ name: "Mango", age: 2 }));
// console.log(countProps({ mail: "poly@mail.com", isOnline: true, score: 500 }));
// ==================================================================================

// ==================================================================================
//Перебери объект apartment используя метод Object.keys() и цикл for...of. Запиши в
// переменную keys массив ключей собственных свойств объекта apartment, и добавь в массив
// values все значения его свойств.
// ----------------------------------------------------------------------------------
// const apartment = {
//   descr: "Spacious apartment in the city center",
//   rating: 4,
//   price: 2153,
// };
// const values = [];
// // Change code below this line
// const keys = Object.keys(apartment);
// for (const key of keys){
//   values.push(apartment[key]);
// }
// ==================================================================================

// ==================================================================================
//Выполни рефакторинг функции countProps(object) используя метод Object.keys() и, возможно, но необязательно, цикл for...of.
// ----------------------------------------------------------------------------------
// function countProps(object) {
//   // Change code below this line
//   let propCount = 0;
//     const keys = Object.keys(object);
//   for (const key of keys) {
//       propCount += 1;
//   }

//   return propCount;
//   // Change code above this line
// };



// console.log(countProps({ mail: "poly@mail.com", isOnline: true, score: 500 }));
// ==================================================================================

// ==================================================================================
//Напиши функцию countTotalSalary(salaries) которая принимает объект зарплат, где имя
// свойства это имя сотрудника, а значение свойства это зарплата.Функция должна рассчитать
//  общую сумму зарплат сотрудников и вернуть её.Используй переменную totalSalary для
//  хранения общей суммы зарплаты.
// ----------------------------------------------------------------------------------
// function countTotalSalary(salaries) {
//   let totalSalary = 0;
//   // Change code below this line
//     const salary = Object.values(salaries);
//     for (const element of salary) {
//         totalSalary += element;
//     }
//   // Change code above this line
//   return totalSalary;
// }

// console.log(countTotalSalary({ mango: 100, poly: 150, alfred: 80 }));
// ==================================================================================

// ==================================================================================
//Перебери массив объектов colors используя цикл for...of. Добавь в массив hexColors
// значения свойств hex, а в массив rgbColors значения свойств rgb из всех объектов массива
// colors.
// ----------------------------------------------------------------------------------
// const colors = [
//   { hex: "#f44336", rgb: "244,67,54" },
//   { hex: "#2196f3", rgb: "33,150,243" },
//   { hex: "#4caf50", rgb: "76,175,80" },
//   { hex: "#ffeb3b", rgb: "255,235,59" },
// ];

// const hexColors = [];
// const rgbColors = [];

// for (const element of colors){
//     hexColors.push(element.hex);
//     rgbColors.push(element.rgb);
// }
// ==================================================================================

// ==================================================================================
//Напиши функцию getProductPrice(productName) которая принимает один параметр
// productName - название продукта.Функция ищет объект продукта с таким именем(свойство name)
// в массиве products и возвращает его цену(свойство price).Если продукт с таким названием
// не найден, функция должна возвращать null.
// ----------------------------------------------------------------------------------
// const products = [
//   { name: "Radar", price: 1300, quantity: 4 },
//   { name: "Scanner", price: 2700, quantity: 3 },
//   { name: "Droid", price: 400, quantity: 7 },
//   { name: "Grip", price: 1200, quantity: 9 },
// ];

// function getProductPrice(productName) {
//     for (const tmc of products) {
//         if (tmc.name == productName) {
//             return tmc.price;
//           continue;
//         }
//     }
//                return null;
// }
// ==================================================================================

// ==================================================================================
//Напиши функцию getAllPropValues(propName) которая принимает один параметр propName -
// имя(ключ) свойства.Функция должна вернуть массив всех значений свойства с таким именем
// из каждого объекта в массиве products.Если в объектах нет свойства с таким именем,
//     функция должна вернуть пустой массив.
// ----------------------------------------------------------------------------------
// const products = [
//   { name: "Radar", price: 1300, quantity: 4 },
//   { name: "Scanner", price: 2700, quantity: 3 },
//   { name: "Droid", price: 400, quantity: 7 },
//   { name: "Grip", price: 1200, quantity: 9 },
// ];

// function getAllPropValues(propName) {
//     const arrPropName = [];
//     for (const element of products) {
//       if (Object.keys(element).includes(propName)) {
//         arrPropName.push(element[propName]);
//       }
//     }
//      return arrPropName;
// }

// console.log(getAllPropValues("quantity"));
// ==================================================================================

// ==================================================================================
//Напиши функцию calculateTotalPrice(productName) которая принимает один параметр
// productName - название товара.Функция должна вернуть общую стоимость(цена * количество)
// товара с таким именем из массива products.
// ----------------------------------------------------------------------------------
// const products = [
//   { name: "Radar", price: 1300, quantity: 4 },
//   { name: "Scanner", price: 2700, quantity: 3 },
//   { name: "Droid", price: 400, quantity: 7 },
//   { name: "Grip", price: 1200, quantity: 9 },
// ];

// function calculateTotalPrice(productName) {
//   let sum = 0;
//   for (const element of products) {
//     if (element.name === productName) {
//       sum = element.price * element.quantity;
//     }
    
// }
// return sum;
// };

// console.log(calculateTotalPrice("Blaster"));
// console.log(calculateTotalPrice("Radar"));
// console.log(calculateTotalPrice("Droid"));
// console.log(calculateTotalPrice("Grip"));
// // ==================================================================================


// ==================================================================================
//Пришел трёхдневный прогноз максимальных температур и мы считаем среднюю температуру
// за три дня(meanTemperature).Замени объявления переменных yesterday, today и tomorrow
// одной операцией деструктуризации свойств объекта highTemperatures.
// ----------------------------------------------------------------------------------
// const highTemperatures = {
//   yesterday: 28,
//   today: 26,
//   tomorrow: 33,
// };
// Change code below this line

// const yesterday = highTemperatures.yesterday;
// const today = highTemperatures.today;
// const tomorrow = highTemperatures.tomorrow;
// const {yesterday, today, tomorrow} = highTemperatures;

// // Change code above this line
// const meanTemperature = (yesterday + today + tomorrow) / 3;
// ==================================================================================

// ==================================================================================
//В прогнозе максимальных температур также может быть необязательное свойство icon -
//  иконка погоды.Замени объявления переменных yesterday, today, tomorrow и icon одной
//  операцией деструктуризации свойств объекта highTemperatures.Задай значение по умолчанию
//  для icon - строку "https://www.flaticon.com/svg/static/icons/svg/2204/2204346.svg".
// ----------------------------------------------------------------------------------
// const highTemperatures = {
//   yesterday: 28,
//   today: 26,
//   tomorrow: 33,
// };
// // Change code below this line

// //const yesterday = highTemperatures.yesterday;
// //const today = highTemperatures.today;
// //const tomorrow = highTemperatures.tomorrow;
// //const icon = highTemperatures.icon;
// const {
//   yesterday,
//   today,
//   tomorrow,
//   icon = "https://www.flaticon.com/svg/static/icons/svg/2204/2204346.svg"
// } = highTemperatures;

// // Change code above this line
// const meanTemperature = (yesterday + today + tomorrow) / 3;
// ==================================================================================

// ==================================================================================
//Замени объявления переменных highYesterday, highToday, highTomorrow и highIcon одной
//  операцией деструктуризации свойств объекта highTemperatures.Задай значение по умолчанию
//  для highIcon - строку "https://www.flaticon.com/svg/static/icons/svg/2204/2204346.svg".
// ----------------------------------------------------------------------------------
// const highTemperatures = {
//   yesterday: 28,
//   today: 26,
//   tomorrow: 33,
// };
// // Change code below this line

// // const highYesterday = highTemperatures.yesterday;
// // const highToday = highTemperatures.today;
// // const highTomorrow = highTemperatures.tomorrow;
// // const highIcon = highTemperatures.icon;
// const { yesterday: highYesterday,
//   today: highToday,
//   tomorrow: highTomorrow,
//   icon: highIcon = "https://www.flaticon.com/svg/static/icons/svg/2204/2204346.svg"
// } = highTemperatures;
// // Change code above this line
// const meanTemperature = (highYesterday + highToday + highTomorrow) / 3;
// ==================================================================================

// ==================================================================================
//Выполни рефакторинг цикла for...of так, чтобы в нём использовалась деструктуризация объекта..
// ----------------------------------------------------------------------------------
// const colors = [
//   { hex: "#f44336", rgb: "244,67,54" },
//   { hex: "#2196f3", rgb: "33,150,243" },
//   { hex: "#4caf50", rgb: "76,175,80" },
//   { hex: "#ffeb3b", rgb: "255,235,59" },
// ];

// const hexColors = [];
// const rgbColors = [];
// // Change code below this line

// for (const {hex, rgb} of colors) {
//   hexColors.push(hex);
//   rgbColors.push(rgb);
// }
// ==================================================================================

// ==================================================================================
//Мы получили прогноз погоды на два дня, с минимальными и максимальными температурами,
//  а также необязательными иконками.Замени объявления всех переменных одной операцией
//  деструктуризации свойств объекта forecast.Задай значение по умолчанию для иконок,
//     переменных todayIcon и tomorrowIcon - строку
// "https://www.flaticon.com/svg/static/icons/svg/2204/2204346.svg".
// ----------------------------------------------------------------------------------
// const forecast = {
//   today: {
//     low: 28,
//     high: 32,
//     icon: "https://www.flaticon.com/svg/static/icons/svg/861/861059.svg",
//   },
//   tomorrow: {
//     low: 27,
//     high: 31,
//   },
// };
// // Change code below this line

// // const highToday = forecast.today.high;
// // const lowToday = forecast.today.low;
// // const todayIcon = forecast.today.icon;

// // const highTomorrow = forecast.tomorrow.high;
// // const lowTomorrow = forecast.tomorrow.low;
// // const tomorrowIcon = forecast.tomorrow.icon;

// const {
//   today: {
//     high: highToday,
//     low: lowToday,
//     icon: todayIcon = "https://www.flaticon.com/svg/static/icons/svg/2204/2204346.svg",
//   },
//   tomorrow: {
//     low: lowTomorrow,
//     high: highTomorrow,
//     icon: tomorrowIcon = "https://www.flaticon.com/svg/static/icons/svg/2204/2204346.svg",
//   }
// } = forecast;
// ==================================================================================

// ==================================================================================
//Функция calculateMeanTemperature(forecast) принимает один параметр forecast - объект
// температур на два дня следующего формата.

// {
//   today: { low: 10, high: 20 },
//   tomorrow: { low: 20, high: 30 }
// }
// Замени объявления переменных todayLow, todayHigh, tomorrowLow и tomorrowHigh одной операцией
//  деструктуризации свойств объекта forecast.
// ----------------------------------------------------------------------------------
// function calculateMeanTemperature(forecast) {
//   //const todayLow = forecast.today.low;
//  // const todayHigh = forecast.today.high;
//  // const tomorrowLow = forecast.tomorrow.low;
// //  const tomorrowHigh = forecast.tomorrow.high;
//   const {
//     today:
//     {
//       low: todayLow,
//       high: todayHigh,
//     },
//         tomorrow:
//     {
//       low: tomorrowLow,
//       high: tomorrowHigh,
//     },
//   } = forecast;

//   // Change code above this line
//   return (todayLow + todayHigh + tomorrowLow + tomorrowHigh) / 4;
// }
// ==================================================================================

// ==================================================================================
//В переменной scores хранится массив результатов тестирования. Используя распыление
// и методы Math.max() и Math.min() дополни код так, чтобы в переменной bestScore был
// самый высокий балл, а в worstScore самый низкий.
// ----------------------------------------------------------------------------------
// const scores = [89, 64, 42, 17, 93, 51, 26];
// // Change code below this line
// const bestScore = Math.max(...scores);
// const worstScore = Math.min(...scores);
// ==================================================================================

// ==================================================================================
//В переменных firstGroupScores, secondGroupScores и thirdGroupScores хранятся результаты тестирования отдельных групп. Используя распыление дополни код так, чтобы:

// В переменной allScores хранился массив всех результатов от первой до третьей группы.
// В переменной bestScore был самый высокий общий балл.
// В переменной worstScore был самый низкий общий балл.
// ----------------------------------------------------------------------------------
// const firstGroupScores = [64, 42, 93];
// const secondGroupScores = [89, 14, 51, 26];
// const thirdGroupScores = [29, 47, 18, 97, 81];
// // Change code below this line
// const allScores = [...firstGroupScores, ...secondGroupScores, ...thirdGroupScores];
// const bestScore = Math.max(...allScores);
// const worstScore = Math.min(...allScores);
// ==================================================================================

// ==================================================================================
//В конструкторе можно создавать новые тесты, для которых есть настройки по умолчанию
// которые хранятся в переменной defaultSettings.Во время создания теста, все или часть
//  настроек можно переопределить, они хранятся в переменной overrideSettings.

// Для того чтобы получить финальные настройки теста, необходимо взять настройки по
//  умолчанию и поверх них применить переопределённые настройки.Дополни код так, чтобы
//  в переменной finalSettings получился объект финальных настроек теста.
// ----------------------------------------------------------------------------------
// const defaultSettings = {
//   theme: "light",
//   public: true,
//   withPassword: false,
//   minNumberOfQuestions: 10,
//   timePerQuestion: 60,
// };
// const overrideSettings = {
//   public: false,
//   withPassword: true,
//   timePerQuestion: 30,
// };
// // Change code below this line
// const finalSettings = {...defaultSettings, ...overrideSettings}
// ==================================================================================

// ==================================================================================
//Напиши функцию makeTask(data) которая принимает один параметр data - объект со следующими
// свойствами.
// text - текст задачи.
// category - категория задачи.
// priority - приоритет задачи.
// Функция должна составить и вернуть новый объект задачи, не изменяя напрямую параметр data.
// В новом объекте должно быть свойство completed, значение которого хранится в одноимённой
// локальной переменной.

// В параметре data гарантированно будет только свойство text, а остальные два, category и
// priority, могут отсутствовать.Тогда, в новом объекте задачи, в свойствах category и
//  priority должны быть значения по умолчанию, хранящиеся в одноимённых локальных переменных.
// ----------------------------------------------------------------------------------
// ==================================================================================


// ==================================================================================
//Напиши функцию makeTask(data) которая принимает один параметр data - объект со следующими
// свойствами.

// text - текст задачи.
// category - категория задачи.
// priority - приоритет задачи.
// Функция должна составить и вернуть новый объект задачи, не изменяя напрямую параметр data.
//  В новом объекте должно быть свойство completed, значение которого хранится в одноимённой
//  локальной переменной.

// В параметре data гарантированно будет только свойство text, а остальные два, category и
// priority, могут отсутствовать.Тогда, в новом объекте задачи, в свойствах category и
// priority должны быть значения по умолчанию, хранящиеся в одноимённых локальных переменных.
// ----------------------------------------------------------------------------------
// function makeTask(data) {
//   const {
//     category = "General",
//     priority = "Normal",
//     completed = false,
//     text,
//   } = data;
//   return { category, priority, text , completed};
//   // Change code above this line
// }

// console.log(makeTask({}));
// console.log(makeTask({ category: "Homemade", priority: "Low", text: "Take out the trash" }));
// ==================================================================================

// ==================================================================================
//Используя операцию rest дополни код функции add() так, чтобы она принимала любое
// количество аргументов, считала и возвращала их сумму.
// ----------------------------------------------------------------------------------
// function add(...args) {
//   let sum = 0;
//   for (const element of args){
//     sum += element;
//   }
//   return sum;
// }
// ==================================================================================

// ==================================================================================
//Функция addOverNum() считает сумму всех аргументов. Измени параметры и тело функции
// addOverNum() так, чтобы она считала сумму только тех аргументов, которые больше чем
//  заданное число.Это число должно быть первым параметром функции.
// ----------------------------------------------------------------------------------
// function addOverNum(compareNumber, ...args) {
//   let total = 0;
//   for (const arg of args) {
//     if(arg > compareNumber){
//     total += arg;
//   }
// }
//   return total;
// }
// ==================================================================================

// ==================================================================================
//Функция findMatches() принимает произвольное количество аргументов. Первым аргументом
//  всегда будет массив чисел, а остальные аргументы будут просто числами.

// Дополни код функции так, чтобы она возвращала новый массив matches, в котором будут
// только те аргументы, начиная со второго, которые есть в массиве первого аргумента.

//     Например, findMatches([1, 2, 3, 4, 5], 1, 8, 2, 7) должна вернуть массив[1, 2],
//  потому что только они есть в массиве первого аргумента.
// ----------------------------------------------------------------------------------
// function findMatches([...array1], ...numbers) {
//   const matches = []; // Don't change this line
//   for (const num of numbers) {
//     if (array1.includes(num)) {
//       matches.push(num);
//   }
// }
//   return matches;
// }
// console.log(findMatches([1, 2, 3, 4, 5], 1, 8, 2, 7));
// ==================================================================================

// ==================================================================================
//Добавь объекту bookShelf ещё два метода, которые пока что будут возвращать просто
// строки по аналогии с getBooks() и addBook(bookName).

// Метод removeBook(bookName) будет удалять книгу по имени.Возвращает строку
// "Deleting book <имя книги>", где < имя книги > это значение параметра bookName.

// Метод updateBook(oldName, newName) будет обновлять название книги на новое.Возвращает
//  строку "Updating book <старое имя> to <новое имя>", где < старое имя > и < новое имя >
//     это значения параметров oldName и newName соотвественно.
// ----------------------------------------------------------------------------------
// const bookShelf = {
//   books: ["The last kingdom", "The guardian of dreams"],
//   getBooks() {
//     return "Returning all books";
//   },
//   addBook(bookName) {
//     return `Adding book ${bookName}`;
//   },
//   removeBook(bookName) {
//     return `Deleting book ${bookName}`;
//   },
//     updateBook(oldName, newName) {
//     return `Updating book ${oldName} to ${newName}`;
//   },
// };
// // ==================================================================================

// ==================================================================================
//Дополни метод updateBook(oldName, newName) так, чтобы он изменял название книги с
// oldName на newName в свойстве books.Используй indexOf() для того, чтобы найти нужный
// элемент массива, и splice() для того чтобы заменить этот элемент
// ----------------------------------------------------------------------------------
// const bookShelf = {
//   books: ["The last kingdom", "Haze", "The guardian of dreams"],
//   updateBook(oldName, newName) {
//     // Change code below this line
// for (const book of this.books) {
//       if (book == oldName) {
//         this.books.splice(this.books.indexOf(book), 1, newName);
//   }
// }
//   },
// };
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// const atTheOldToad = {
//   potions: ["Speed potion", "Dragon breath", "Stone skin"],
//   getPotions() {
//     return this.potions;
//   },
//   addPotion(potionName) {
//     this.potions.push(potionName);
//   },
//   removePotion(potionName) {
//     for (const potion of this.potions) {
//       if (potion == potionName) {
//       this.potions.splice(this.potions.indexOf(potion), 1);
//       };
//     };
//   },
//   updatePotionName(oldName, newName) {
//         for (const potion of this.potions) {
//       if (potion == oldName) {
//       this.potions.splice(this.potions.indexOf(oldName), 1, newName);
//       };
//     };
//   },
// };
// ==================================================================================

// ==================================================================================
//Заказчица хочет чтобы каждое зелье было представлено не только именем, но и ценой, а в будущем может быть и другими характеристиками. Поэтому теперь в свойстве potions будет храниться массив объектов со следующими свойствами.

// {
//   name: "Dragon breath",
//   price: 700
// }
// Выполни рефакторинг методов объекта atTheOldToad так, чтобы они работали не с массивом строк, а с массивом объектов.

// getPotions() - метод для получения всех зелий. Возвращает значение свойства potions.
// addPotion(newPotion) - добавляет зелье newPotion (уже объект) в массив в свойстве potions, но только если такого зелья еще нет в инвентаре. В противном случае возвращается строка.
// removePotion(potionName) - удаляет объект зелья с именем potionName из массива в свойстве potions.
// updatePotionName(oldName, newName) - обновляет свойство name объекта-зелья с названием oldName на newName в массиве potions.
// Объявлена переменная atTheOldToad
// Значение переменной atTheOldToad это объект
// Значение свойства atTheOldToad.getPotions это метод объекта
// Вызов метода atTheOldToad.getPotions() для исходного объекта возвращает [ { name: "Speed potion", price: 460 }, { name: "Dragon breath", price: 780 }, { name: "Stone skin", price: 520 } ]
// Значение свойства atTheOldToad.addPotion это метод объекта.
// Для исходного объекта после вызова метода atTheOldToad.addPotion({ name: "Invisibility", price: 620 }), в массиве potions последним элементом будет этот объект
// Для исходного объекта после вызова метода atTheOldToad.addPotion({ name: "Power potion", price: 270 }), в массиве potions последним элементом будет этот объект
// Если добавляемое зелье уже есть в массиве potions, метод addPotion возвращает строку с текстом из исходного кода
// Если добавляемое зелье уже есть в массиве potions, метод addPotion не добавляет в него передаваемый обьект
// Для исходного объекта после вызова atTheOldToad.addPotion({ name: "Dragon breath", price: 700 }), массив potions не изменяется
// Для исходного объекта после вызова atTheOldToad.addPotion({ name: "Stone skin", price: 240 }), массив potions не изменяется
// Для исходного объекта вызов atTheOldToad.addPotion({ name: "Dragon breath", price: 700 }), возвращает строку "Error! Potion Dragon breath is already in your inventory!"
// Для исходного объекта вызов atTheOldToad.addPotion({ name: "Stone skin", price: 240 }), возвращает строку "Error! Potion Stone skin is already in your inventory!"
// Значение свойства atTheOldToad.removePotion это метод объекта
// Для исходного объекта после вызова метода atTheOldToad.removePotion("Dragon breath"), в свойстве potions будет массив [ { name: "Speed potion", price: 460 }, { name: "Stone skin", price: 520 } ]
// Для исходного объекта после вызова метода atTheOldToad.removePotion("Speed potion"), в свойстве potions будет массив [ { name: "Dragon breath", price: 780 }, { name: "Stone skin", price: 520 }]
// Значение свойства atTheOldToad.updatePotionName это метод объекта
// Для исходного объекта после вызова метода atTheOldToad.updatePotionName("Dragon breath", "Polymorth"), в свойстве potions будет массив [{ name: "Speed potion", price: 460 }, { name: "Polymorth", price: 780 }, { name: "Stone skin", price: 520 } ]
// Для исходного объекта после вызова метода atTheOldToad.updatePotionName("Stone skin", "Invulnerability potion"), в свойстве potions будет массив [{ name: "Speed potion", price: 460 }, { name: "Dragon breath", price: 780 }, { name: "Invulnerability potion", price: 520 } ]
// ----------------------------------------------------------------------------------
// const atTheOldToad = {
//   potions: [
//     { name: "Speed potion", price: 460 },
//     { name: "Dragon breath", price: 780 },
//     { name: "Stone skin", price: 520 },
//   ],
//   // Change code below this line
//   getPotions(...potions) {
//     return this.potions;
//   },
//   addPotion(newPotion) {
//     for (const potion of this.potions) {
//       if (potion.name == newPotion.name) {
//         return `Error! Potion ${newPotion.name} is already in your inventory!`;
//         break;
//       }
//     }
//     this.potions.push(newPotion);
//   },
//   removePotion(potionName) {
//     for (const potion of this.potions) {
//     if (potion.name == potionName) {
//       return this.potions.splice(this.potions.indexOf(potion), 1);
//     }
//     }
//     return `Potion ${potionName} is not in inventory!`;
//   },
//   updatePotionName(oldName, newName) {
//     for (const potion of this.potions) {
//     if (potion.name == oldName) {
//       potion.name = newName;
//     }
//     }
//       return `Potion ${oldName} is not in inventory!`;
//   },
//   // Change code above this line
// };


// // console.log(atTheOldToad.getPotions());
// console.log(atTheOldToad.addPotion({ name: "Dragon breath", price: 700 }));

// // atTheOldToad.removePotion("Speed potion");
// // console.log(atTheOldToad.getPotions());
// // atTheOldToad.updatePotionName('Stone skin', 'Invulnerability potion');
// // console.log(atTheOldToad.getPotions());
// ==================================================================================

// ==================================================================================
//Необходимо написать логику обработки заказа пиццы. Выполни рефакторинг метода order так,
//  чтобы он принимал вторым и третим параметрами два колбэка onSuccess и onError.

// Если в свойстве pizzas нет пиццы с названием из параметра pizzaName, метод order должен
// возвращать результат вызова колбэка onError, передавая ему аргументом строку
// "There is no pizza with a name <имя пиццы> in the assortment."
// Если в свойстве pizzas есть пицца с названием из параметра pizzaName, метод order должен
// возвращать результат вызова колбэка onSuccess, передавая ему аргументом имя заказанной пиццы.
// После объявления объекта pizzaPalace мы добавили колбэки и вызовы методов.Пожалуйста
// ничего там не меняй.
// ----------------------------------------------------------------------------------
// const pizzaPalace = {
//   pizzas: ['Ultracheese', 'Smoked', 'Four meats'],
//   order(pizzaName, onSuccess, onError) {
//     if (this.pizzas.includes(pizzaName)) {
//       return makePizza(pizzaName);
//     }
//         return   onOrderError(pizzaName);
//   },
// };
// // Change code above this line

// // Callback for onSuccess
// function makePizza(pizzaName) {
//   return `Your order is accepted. Cooking pizza ${pizzaName}.`;
// }

// // Callback for onError
// function onOrderError(error) {
//   return `Error! There is no pizza with a name ${error} in the assortment.`;
// }

// // Method calls with callbacks
// pizzaPalace.order('Smoked', makePizza, onOrderError);
// pizzaPalace.order('Four meats', makePizza, onOrderError);
// pizzaPalace.order('Big Mike', makePizza, onOrderError);
// pizzaPalace.order('Vienna', makePizza, onOrderError);
// ==================================================================================

// ==================================================================================
//Функция calculateTotalPrice(orderedItems) принимает один параметр orderedItems - массив
// чисел, и рассчитывает общую сумму его элементов, которая сохраняется в переменной totalPrice
//  и возвращается как результат работы функции.

// Выполни рефакторинг функции так, чтобы вместо цикла for она использовала метод forEach.
// ----------------------------------------------------------------------------------
// function calculateTotalPrice(orderedItems) {
//   let totalPrice = 0;
//   // Change code below this line


// orderedItems.forEach(function (number, index) {
//  totalPrice += number;
// });
//   // Change code above this line
//   return totalPrice;
// }
// console.log(calculateTotalPrice([12, 85, 37, 4]));
// ==================================================================================


// ==================================================================================
//Функция filterArray(numbers, value) принимает массив чисел numbers и возвращает новый
// массив, в котором будут только те элементы оригинального массива, которые больше чем
//  значение параметра value.

// Выполни рефакторинг функции так, чтобы вместо цикла for она использовала метод forEach.
// ----------------------------------------------------------------------------------
// function filterArray(numbers, value) {
//   const filteredNumbers = [];
//   // Change code below this line

// numbers.forEach(function(number, index){
//       if (number > value) {
//       filteredNumbers.push(number);
//     }
// })
//   // Change code above this line
//   return filteredNumbers;
// }
// ==================================================================================

// ==================================================================================
//Функция getCommonElements(firstArray, secondArray) принимает два массива произвольной
// длины в параметры firstArray и secondArray, и возвращает новый массив их общих элементов,
//     то есть тех которые есть в обоих массивах.

// Выполни рефакторинг функции так, чтобы вместо цикла for она использовала метод forEach.
// ----------------------------------------------------------------------------------
// function getCommonElements(firstArray, secondArray) {
//   const commonElements = [];
//   // Change code below this line

//   firstArray.forEach(function(number, index){
//     if (secondArray.includes(number)) {
//       commonElements.push(number);
//     };
//   });

//   return commonElements;
//   // Change code above this line
// }

// console.log(getCommonElements([1, 2, 3], [2, 4]));
// ==================================================================================

// ==================================================================================
//Выполни рефакторинг функции calculateTotalPrice(orderedItems) заменив её объявление
// на стрелочную функцию.Замени коллбек - функцию передаваемую в метод forEach() на стрелочную функцию.
// ----------------------------------------------------------------------------------
// const calculateTotalPrice = orderedItems => {
//   let totalPrice = 0;

//   orderedItems.forEach((item) =>{
//     totalPrice += item;
//   });

//   return totalPrice;
// }

// console.log(calculateTotalPrice([12, 85, 37, 4]));
// ==================================================================================

// ==================================================================================
//Перебор массива
// ----------------------------------------------------------------------------------
// const filterArray = (numbers, value) => {
//   const filteredNumbers = [];

//   numbers.forEach(number => {
//     if (number > value) {
//       filteredNumbers.push(number);
//     }
//   });

//   // Change code above this line
//   return filteredNumbers;
// }
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// const getCommonElements = (firstArray, secondArray) => {
//   const commonElements = [];

//   firstArray.forEach(element => {
//     if (secondArray.includes(element)) {
//       commonElements.push(element);
//     }
//   });

//   // Change code above this line
//   return commonElements;
// }
// ==================================================================================

// ==================================================================================
//Функция changeEven(numbers, value) принимает массив чисел numbers и обновляет каждый
// элемент, значение которого это чётное число, добавляя к нему значение параметра value.

// Выполни рефакторинг функции так, чтобы она стала чистой - не изменяла массив чисел numbers,
//   а создавала, наполняла и возвращала новый массив с обновлёнными значениями.
// ----------------------------------------------------------------------------------
// function changeEven(numbers, value) {
//     const newNumbers = numbers.slice(0);
//     for (let i = 0; i < newNumbers.length; i += 1) {
//     if (newNumbers[i] % 2 === 0) {
//       newNumbers[i] = newNumbers[i] + value;
//     }
//   }
//   return newNumbers;
// }
// ==================================================================================

// ==================================================================================
//Используя метод map() сделай так, чтобы в переменной titles получился массив названий
// книг(свойство title) из всех объектов массива books.
// ----------------------------------------------------------------------------------
// const books = [
//   {
//     title: "The Last Kingdom",
//     author: "Bernard Cornwell",
//     rating: 8.38,
//   },
//   {
//     title: "Beside Still Waters",
//     author: "Robert Sheckley",
//     rating: 8.51,
//   },
//   {
//     title: "The Dream of a Ridiculous Man",
//     author: "Fyodor Dostoevsky",
//     rating: 7.75,
//   },
//   { title: "Redder Than Blood", author: "Tanith Lee", rating: 7.94 },
//   { title: "Enemy of God", author: "Bernard Cornwell", rating: 8.67 },
// ];

// const titles = books.map(book => book.title);
// ==================================================================================

// ==================================================================================
//Дополни функцию getUserNames(users) так, чтобы она возвращала массив имён пользователей
// (свойство name) из массива объектов в параметре users.
// ----------------------------------------------------------------------------------
// const getUserNames = users => {
//     return  users.map(user => user.name);

//   };
// ==================================================================================

// ==================================================================================
//Дополни код так, чтобы в переменной evenNumbers получился массив чётных чисел из массива
// numbers, а в переменной oddNumbers массив нечётных.Обязательно используй метод filter().
// ----------------------------------------------------------------------------------
// const numbers = [17, 24, 82, 61, 36, 18, 47, 52, 73];
// // Change code below this line

// const evenNumbers = numbers.filter( value => value % 2 === 0);
// const oddNumbers = numbers.filter( value => value % 2 !== 0);
// ==================================================================================

// ==================================================================================
//Дополни код так, чтобы в переменной allGenres был массив всех жанров книг (свойство
// genres) из массива books, а в переменной uniqueGenres массив уникальных жанров - без повторений.
// ----------------------------------------------------------------------------------

// const books = [
//   {
//     title: "The Last Kingdom",
//     author: "Bernard Cornwell",
//     genres: ["adventure", "history"],
//   },
//   {
//     title: "Beside Still Waters",
//     author: "Robert Sheckley",
//     genres: ["fiction", "mysticism"],
//   },
//   {
//     title: "Redder Than Blood",
//     author: "Tanith Lee",
//     genres: ["horror", "mysticism", "adventure"],
//   },
// ];
// // Change code below this line
// const allGenres = books.flatMap (book => book.genres);
// const uniqueGenres = allGenres.filter((genre, index, array) => array.indexOf(genre) === index);
//  console.log(allGenres);
// ==================================================================================


// ==================================================================================
// //При работе с массивом объектов выполняется фильтрация по значению какого-то свойства. 
// В результате получается новый массив отфильтрованных объектов.

//     Например, есть массив студентов с баллами за тест.Необходимо отфильтровать лучших(балл выше 80),
//         худших(балл ниже 50) и средних студентов(балл от 50 до 80).
// ----------------------------------------------------------------------------------
// const books = [
//   {
//     title: "The Last Kingdom",
//     author: "Bernard Cornwell",
//     rating: 8.38,
//   },
//   {
//     title: "Beside Still Waters",
//     author: "Robert Sheckley",
//     rating: 8.51,
//   },
//   {
//     title: "The Dream of a Ridiculous Man",
//     author: "Fyodor Dostoevsky",
//     rating: 7.75,
//   },
//   { title: "Redder Than Blood", author: "Tanith Lee", rating: 7.94 },
//   { title: "Enemy of God", author: "Bernard Cornwell", rating: 8.67 },
// ];

// const MIN_RATING = 8;
// const AUTHOR = "Bernard Cornwell";
// // Change code below this line

// const topRatedBooks = books.filter( book => book.rating >= MIN_RATING);
// const booksByAuthor = books.filter ( book => book.author === AUTHOR);
// ==================================================================================
// ==================================================================================
//Дополни функцию getUsersWithEyeColor(users, color) так, чтобы она возвращала массив
//  пользователей у которых цвет глаз(свойство eyeColor) совпадает со значением параметра color.
// ----------------------------------------------------------------------------------
// const getUsersWithEyeColor = (users, color) => {
//  return users.filter( user => user.eyeColor === color);
// };
// ==================================================================================
// ==================================================================================
//Дополни функцию getUsersWithAge(users, minAge, maxAge) так, чтобы она возвращала 
// массив пользователей, возраст которых(свойство age) попадает в промежуток от minAge до maxAge.
// ----------------------------------------------------------------------------------
// const getUsersWithAge = (users, minAge, maxAge) => {
//  return users.filter(user => user.age>=minAge&user.age<=maxAge)
// };
// ==================================================================================
// ==================================================================================
//Дополни функцию getUsersWithFriend(users, friendName) так, чтобы она возвращала массив
//  пользователей у которых есть друг с именем в параметре friendName.Массив друзей пользователя
//   хранится в свойстве friends.
// ----------------------------------------------------------------------------------
// const getUsersWithFriend = (users, friendName) => {
//    return users.filter(user => user.friends.includes(friendName));
// };
// ==================================================================================
// ==================================================================================
//Дополни функцию getFriends(users) так, чтобы она возвращала массив друзей всех 
// пользователей(свойство friends).У нескольких пользователей могут быть одинаковые друзья,
//     сделай так чтобы возвращаемый массив не содержал повторений.
// ----------------------------------------------------------------------------------
// const getFriends = (users) => {
// return users.flatMap(user => user.friends).filter((friend, index, array) => array.indexOf(friend) === index);
// };
// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================
// ==================================================================================
//
// ----------------------------------------------------------------------------------

// ==================================================================================


















