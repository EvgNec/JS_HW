


// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================


// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================


// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================


// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================


// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
// Напиши функцию calculateTotalPrice(order), которая принимает один параметр order -
// массив чисел, и рассчитывает общую сумму его элементов.Общая сумма элементов должна
// сохраняться в переменной total, которая возвращается, как результат работы функции.
// ----------------------------------------------------------------------------------
// function calculateTotalPrice(order) {
//   let total = 0;
// for (let i = 0; i < order.length; i+=1) {
//   total += order[i];
// }
//   return total;
// }
// ==================================================================================

// ==================================================================================
// Напиши функцию findLongestWord(string) которая принимает произвольную строку
// состоящую только из слов разделённых пробелом(параметр string) и возвращает
// самое длинное слово в этой строке.
// ----------------------------------------------------------------------------------
// function findLongestWord (string) {
//     const stringSplit = string.split(' ');
//     let longestWord = "";

//     for (const word of stringSplit) {
//         if (word.length > longestWord.length) {
//             longestWord = word;
//         }
//     }
//     return longestWord;
// }
// ----------------------------------------------------------------------------------
// function findLongestWord(string) {
//  return string.split(' ').reduce((a, b) => (b.length > a.length) ? b : a);
// };
// ==================================================================================

// ==================================================================================
//Дополни код функции createArrayOfNumbers(min, max) так, чтобы она возвращала массив всех целых чисел от значения min до max.
// ----------------------------------------------------------------------------------
// function createArrayOfNumbers(min, max) {
//   const numbers = [];
//     for (let i = min; i <= max; i++) {
//         numbers.push(i);
//     }
//   return numbers;
// }
// ==================================================================================

// ==================================================================================
//Напиши функцию filterArray(numbers, value), которая принимает массив чисел (параметр
// numbers) и возвращает новый массив, в котором будут только те элементы массива numbers,
// которые больше чем значение параметра value(число).
// ----------------------------------------------------------------------------------
// function filterArray(numbers, value) {
//     const newNumbers = [];
//     for (element of numbers) {
//         if (element > value) {
//             newNumbers.push(element);
//         }
//     }
//     return newNumbers
// }
// ----------------------------------------------------------------------------------
// function filterArray(numbers, value) {
//     return numbers.filter(number => number > value);
// }
// ==================================================================================

// ==================================================================================
//Функция checkFruit(fruit) принимает строку с названием фрукта (параметр fruit), и проверяет есть ли такой фрукт в массиве fruits.
// Дополни код функции так, что если:
// фрукт есть в массиве, то функция возвращает true;
// фрукта нет в массиве, то функция возвращает false.
// ----------------------------------------------------------------------------------
// function checkFruit(fruit) {
//   const fruits = ["apple", "plum", "pear", "orange"];

//   return fruits.includes(fruit); // Change this line
// }
// ==================================================================================

// ==================================================================================
//Общими элементами массивов называют те элементы, которые присутствуют во всех массивах.
// Например, в двух массивах[1, 3, 5] и[0, 8, 5, 3] общими будут числа 3 и 5, т.к.они
// присутствуют в обоих исходных массивах.А числа 0, 1 и 8 присутствуют только в одном из массивов.
// Напиши функцию getCommonElements(array1, array2) которая получает два массива произвольной
// длины в параметры array1 и array2, и возвращает новый массив, состоящий из тех элементов,
// которые присутствуют в обоих исходных массивах.
// ---------------------------------------------------------------------------------
// function getCommonElements(array1, array2) {
//     const array3 = [];
//     for (const element of array1) {
//         array2.includes(element) ? array3.push(element) : '';
//     }        return array3;
// }
// console.log(getCommonElements([10, 20, 30, 40], [4, 30, 17, 10, 40]));
// ---------------------------------------------------------------------------------
// function getCommonElements(array1, array2) {
//     const array3 = [];
//     for (element of array1) {
//         array2.includes(element) ? array3.push(element) : '';
//     }        return array3;
// }
// console.log(getCommonElements([10, 20, 30, 40], [4, 30, 17, 10, 40]));
// ----------------------------------------------------------------------------------
// function getCommonElements(array1, array2) {
//     const array3 = [];
//     for (element of array1) {
//         if (array2.includes(element)) {
//             array3.push(element);
//         }
//     }        return array3;
// }
// console.log(getCommonElements([10, 20, 30, 40], [4, 30, 17, 10, 40]));
// ----------------------------------------------------------------------------------
// function getCommonElements(array1, array2) {
//     const array3 = [];
//     for (element of array1) {
//         for (element2 of array2) {
//             if (element === element2) {
//                 array3.push(element);
//             }
//         }
//     }
//     return array3;
// }
// console.log(getCommonElements([10, 20, 30, 40], [4, 30, 17, 10, 40]));
// ==================================================================================

// ==================================================================================
//Выполни рефакторинг кода функции calculateTotalPrice(order) заменив цикл for на for...of.
// ----------------------------------------------------------------------------------
// function calculateTotalPrice(order) {
//   let total = 0;
//   for (element of order) {
//     total += element;
//   }
//   return total;
// }
// ==================================================================================

// ==================================================================================
//Выполни рефакторинг функции filterArray(numbers, value) заменив цикл for на for...of.
// ----------------------------------------------------------------------------------
// function filterArray(numbers, value) {
//   // Change code below this line
//   const filteredNumbers = [];

//   for (let i = 0; i < numbers.length; i += 1) {
//     const number = numbers[i];

//     if (number > value) {
//       filteredNumbers.push(number);
//     }
//   }

//   return filteredNumbers;
//   // Change code above this line
// }
// // ----------------------------------------------------------------------------------
// function filterArray(numbers, value) {
//   // Change code below this line
//   const filteredNumbers = [];

//   for (element of numbers) {
//     const number = element;

//     if (number > value) {
//       filteredNumbers.push(number);
//     }
//   }

//   return filteredNumbers;
//   // Change code above this line
// }
// ==================================================================================

// ==================================================================================
//Напиши функцию getEvenNumbers(start, end) которая возвращает массив всех чётных чисел
// от start до end.Чётным считается число которое делится на 2 без остатка(10 % 2 === 0).
// ----------------------------------------------------------------------------------
// function getEvenNumbers(start, end) {
//     const arr = [];
//     for (let i = start; i <= end; i++) {
//         if (i % 2 === 0) {
//             arr.push(i);
//         }
//     }
//     return arr;
// }

// console.log(getEvenNumbers(3, 11));
// ==================================================================================

// ==================================================================================
//Дополни код так, чтобы в переменную number записывалось первое число от start до end, которое делится на 5 без остатка.
// ----------------------------------------------------------------------------------
// const start = 6;
// const end = 27;
// let number;

// for (let i = start; i < end; i += 1) {
//   if (i % 5 === 0) {
//     number = i;
//     break;
//   }
// }
// ==================================================================================

// ==================================================================================
// //Выполни рефакторинг функции findNumber(start, end, divisor) так, чтобы она:

// возвращала первое число от start до end, которое делится на divisor без остатка
// не использовала оператор break
// не использовала переменную number
// ----------------------------------------------------------------------------------
// function findNumber(start, end, divisor) {
//   // Change code below this line

//   for (let i = start; i < end; i += 1) {
//     if (i % divisor === 0) {
//   return i;
//     }
//   }


//   // Change code above this line
// }
// ==================================================================================

// ==================================================================================
// //Напиши функцию includes(array, value), которая делает тоже самое, что и метод массива массив.includes(значение) -
// проверяет, есть ли в массиве array значение value, возвращая true если есть и false в противном случае.
// При выполнении этой задачи в теле функции includes() нельзя использовать метод массив.includes(значение).
// ----------------------------------------------------------------------------------
// function includes(array, value) {
//     for (let element of array) {
//     if (element === value) {
//         return true;
//         }
//     }
//             return false;
// }

// console.log(includes(["Earth", "Mars", "Venus", "Jupiter", "Saturn"], "Jupiter"));
// ==================================================================================


// ==================================================================================
//Перебери объект apartment используя цикл for...in и запиши в массив keys все его ключи, а в массив values все значения его свойств.
// ----------------------------------------------------------------------------------
// const apartment = {
//   descr: "Spacious apartment in the city center",
//   rating: 4,
//   price: 2153,
// };
// const keys = [];
// const values = [];
// for (const key in apartment){

//     keys.push(key);
//     values.push(apartment[key]);
// }
// ==================================================================================

// ==================================================================================
// //Метод Object.create(animal) создаёт и возвращает новый объект, связывая его с объектом animal.
//  Поэтому можно получить значение свойства legs обратившись к нему как dog.legs, хотя его нет в
//  объекте dog - это несобственное свойство из объекта animal.

// Оператор in, который используется в цикле for...in, не делает различия между собственными
// и несобственными свойствами объекта.Эта особенность мешает, так как мы всегда хотим перебрать
// только собственные свойства.Для того чтобы узнать есть в объекте собственное свойство или нет,
//     используется метод hasOwnProperty(key), который возвращает true или false.
// Выполни рефакторинг решения предыдущего задания добавив в цикл for...in проверку на собственное свойство.
// ----------------------------------------------------------------------------------
// const keys = [];
// const values = [];
// const advert = {
//   service: "apt",
// };
// const apartment = Object.create(advert);
// apartment.descr = "Spacious apartment in the city center";
// apartment.rating = 4;
// apartment.price = 2153;

// for (const key in apartment) {
//   // Change code below this line
// if (apartment.hasOwnProperty(key)){
//   keys.push(key);
//   values.push(apartment[key]);
// };
//   // Change code above this line
// }
// ==================================================================================

// ==================================================================================
//Напиши функцию countProps(object), которая считает и возвращает количество собственных
// свойств объекта в параметре object.Используй переменную propCount для хранения
// количества свойств объекта.
// ----------------------------------------------------------------------------------
// function countProps(object) {
//   let propCount = 0;
//     for (const key in object) {
//         if (object.hasOwnProperty(key)) {
//             propCount++;
//         }
//     }
//      return propCount;
// };


// console.log(countProps({}));
// console.log(countProps({ name: "Mango", age: 2 }));
// console.log(countProps({ mail: "poly@mail.com", isOnline: true, score: 500 }));
// ==================================================================================

// ==================================================================================
//Перебери объект apartment используя метод Object.keys() и цикл for...of. Запиши в
// переменную keys массив ключей собственных свойств объекта apartment, и добавь в массив
// values все значения его свойств.
// ----------------------------------------------------------------------------------
// const apartment = {
//   descr: "Spacious apartment in the city center",
//   rating: 4,
//   price: 2153,
// };
// const values = [];
// // Change code below this line
// const keys = Object.keys(apartment);
// for (const key of keys){
//   values.push(apartment[key]);
// }
// ==================================================================================

// ==================================================================================
//Выполни рефакторинг функции countProps(object) используя метод Object.keys() и, возможно, но необязательно, цикл for...of.
// ----------------------------------------------------------------------------------
// function countProps(object) {
//   // Change code below this line
//   let propCount = 0;
//     const keys = Object.keys(object);
//   for (const key of keys) {
//       propCount += 1;
//   }

//   return propCount;
//   // Change code above this line
// };



// console.log(countProps({ mail: "poly@mail.com", isOnline: true, score: 500 }));
// ==================================================================================

// ==================================================================================
//Напиши функцию countTotalSalary(salaries) которая принимает объект зарплат, где имя
// свойства это имя сотрудника, а значение свойства это зарплата.Функция должна рассчитать
//  общую сумму зарплат сотрудников и вернуть её.Используй переменную totalSalary для
//  хранения общей суммы зарплаты.
// ----------------------------------------------------------------------------------
// function countTotalSalary(salaries) {
//   let totalSalary = 0;
//   // Change code below this line
//     const salary = Object.values(salaries);
//     for (const element of salary) {
//         totalSalary += element;
//     }
//   // Change code above this line
//   return totalSalary;
// }

// console.log(countTotalSalary({ mango: 100, poly: 150, alfred: 80 }));
// ==================================================================================

// ==================================================================================
//Перебери массив объектов colors используя цикл for...of. Добавь в массив hexColors
// значения свойств hex, а в массив rgbColors значения свойств rgb из всех объектов массива
// colors.
// ----------------------------------------------------------------------------------
// const colors = [
//   { hex: "#f44336", rgb: "244,67,54" },
//   { hex: "#2196f3", rgb: "33,150,243" },
//   { hex: "#4caf50", rgb: "76,175,80" },
//   { hex: "#ffeb3b", rgb: "255,235,59" },
// ];

// const hexColors = [];
// const rgbColors = [];

// for (const element of colors){
//     hexColors.push(element.hex);
//     rgbColors.push(element.rgb);
// }
// ==================================================================================

// ==================================================================================
//Напиши функцию getProductPrice(productName) которая принимает один параметр
// productName - название продукта.Функция ищет объект продукта с таким именем(свойство name)
// в массиве products и возвращает его цену(свойство price).Если продукт с таким названием
// не найден, функция должна возвращать null.
// ----------------------------------------------------------------------------------
// const products = [
//   { name: "Radar", price: 1300, quantity: 4 },
//   { name: "Scanner", price: 2700, quantity: 3 },
//   { name: "Droid", price: 400, quantity: 7 },
//   { name: "Grip", price: 1200, quantity: 9 },
// ];

// function getProductPrice(productName) {
//     for (const tmc of products) {
//         if (tmc.name == productName) {
//             return tmc.price;
//           continue;
//         }
//     }
//                return null;
// }
// ==================================================================================

// ==================================================================================
//Напиши функцию getAllPropValues(propName) которая принимает один параметр propName -
// имя(ключ) свойства.Функция должна вернуть массив всех значений свойства с таким именем
// из каждого объекта в массиве products.Если в объектах нет свойства с таким именем,
//     функция должна вернуть пустой массив.
// ----------------------------------------------------------------------------------
// const products = [
//   { name: "Radar", price: 1300, quantity: 4 },
//   { name: "Scanner", price: 2700, quantity: 3 },
//   { name: "Droid", price: 400, quantity: 7 },
//   { name: "Grip", price: 1200, quantity: 9 },
// ];

// function getAllPropValues(propName) {
//     const arrPropName = [];
//     for (const element of products) {
//       if (Object.keys(element).includes(propName)) {
//         arrPropName.push(element[propName]);
//       }
//     }
//      return arrPropName;
// }

// console.log(getAllPropValues("quantity"));
// ==================================================================================

// ==================================================================================
//Напиши функцию calculateTotalPrice(productName) которая принимает один параметр
// productName - название товара.Функция должна вернуть общую стоимость(цена * количество)
// товара с таким именем из массива products.
// ----------------------------------------------------------------------------------
// const products = [
//   { name: "Radar", price: 1300, quantity: 4 },
//   { name: "Scanner", price: 2700, quantity: 3 },
//   { name: "Droid", price: 400, quantity: 7 },
//   { name: "Grip", price: 1200, quantity: 9 },
// ];

// function calculateTotalPrice(productName) {
//   let sum = 0;
//   for (const element of products) {
//     if (element.name === productName) {
//       sum = element.price * element.quantity;
//     }
    
// }
// return sum;
// };

// console.log(calculateTotalPrice("Blaster"));
// console.log(calculateTotalPrice("Radar"));
// console.log(calculateTotalPrice("Droid"));
// console.log(calculateTotalPrice("Grip"));
// // ==================================================================================


// ==================================================================================
//Пришел трёхдневный прогноз максимальных температур и мы считаем среднюю температуру
// за три дня(meanTemperature).Замени объявления переменных yesterday, today и tomorrow
// одной операцией деструктуризации свойств объекта highTemperatures.
// ----------------------------------------------------------------------------------
// const highTemperatures = {
//   yesterday: 28,
//   today: 26,
//   tomorrow: 33,
// };
// Change code below this line

// const yesterday = highTemperatures.yesterday;
// const today = highTemperatures.today;
// const tomorrow = highTemperatures.tomorrow;
// const {yesterday, today, tomorrow} = highTemperatures;

// // Change code above this line
// const meanTemperature = (yesterday + today + tomorrow) / 3;
// ==================================================================================

// ==================================================================================
//В прогнозе максимальных температур также может быть необязательное свойство icon -
//  иконка погоды.Замени объявления переменных yesterday, today, tomorrow и icon одной
//  операцией деструктуризации свойств объекта highTemperatures.Задай значение по умолчанию
//  для icon - строку "https://www.flaticon.com/svg/static/icons/svg/2204/2204346.svg".
// ----------------------------------------------------------------------------------
// const highTemperatures = {
//   yesterday: 28,
//   today: 26,
//   tomorrow: 33,
// };
// // Change code below this line

// //const yesterday = highTemperatures.yesterday;
// //const today = highTemperatures.today;
// //const tomorrow = highTemperatures.tomorrow;
// //const icon = highTemperatures.icon;
// const {
//   yesterday,
//   today,
//   tomorrow,
//   icon = "https://www.flaticon.com/svg/static/icons/svg/2204/2204346.svg"
// } = highTemperatures;

// // Change code above this line
// const meanTemperature = (yesterday + today + tomorrow) / 3;
// ==================================================================================

// ==================================================================================
//Замени объявления переменных highYesterday, highToday, highTomorrow и highIcon одной
//  операцией деструктуризации свойств объекта highTemperatures.Задай значение по умолчанию
//  для highIcon - строку "https://www.flaticon.com/svg/static/icons/svg/2204/2204346.svg".
// ----------------------------------------------------------------------------------
// const highTemperatures = {
//   yesterday: 28,
//   today: 26,
//   tomorrow: 33,
// };
// // Change code below this line

// // const highYesterday = highTemperatures.yesterday;
// // const highToday = highTemperatures.today;
// // const highTomorrow = highTemperatures.tomorrow;
// // const highIcon = highTemperatures.icon;
// const { yesterday: highYesterday,
//   today: highToday,
//   tomorrow: highTomorrow,
//   icon: highIcon = "https://www.flaticon.com/svg/static/icons/svg/2204/2204346.svg"
// } = highTemperatures;
// // Change code above this line
// const meanTemperature = (highYesterday + highToday + highTomorrow) / 3;
// ==================================================================================

// ==================================================================================
//Выполни рефакторинг цикла for...of так, чтобы в нём использовалась деструктуризация объекта..
// ----------------------------------------------------------------------------------
// const colors = [
//   { hex: "#f44336", rgb: "244,67,54" },
//   { hex: "#2196f3", rgb: "33,150,243" },
//   { hex: "#4caf50", rgb: "76,175,80" },
//   { hex: "#ffeb3b", rgb: "255,235,59" },
// ];

// const hexColors = [];
// const rgbColors = [];
// // Change code below this line

// for (const {hex, rgb} of colors) {
//   hexColors.push(hex);
//   rgbColors.push(rgb);
// }
// ==================================================================================

// ==================================================================================
//Мы получили прогноз погоды на два дня, с минимальными и максимальными температурами,
//  а также необязательными иконками.Замени объявления всех переменных одной операцией
//  деструктуризации свойств объекта forecast.Задай значение по умолчанию для иконок,
//     переменных todayIcon и tomorrowIcon - строку
// "https://www.flaticon.com/svg/static/icons/svg/2204/2204346.svg".
// ----------------------------------------------------------------------------------
// const forecast = {
//   today: {
//     low: 28,
//     high: 32,
//     icon: "https://www.flaticon.com/svg/static/icons/svg/861/861059.svg",
//   },
//   tomorrow: {
//     low: 27,
//     high: 31,
//   },
// };
// // Change code below this line

// // const highToday = forecast.today.high;
// // const lowToday = forecast.today.low;
// // const todayIcon = forecast.today.icon;

// // const highTomorrow = forecast.tomorrow.high;
// // const lowTomorrow = forecast.tomorrow.low;
// // const tomorrowIcon = forecast.tomorrow.icon;

// const {
//   today: {
//     high: highToday,
//     low: lowToday,
//     icon: todayIcon = "https://www.flaticon.com/svg/static/icons/svg/2204/2204346.svg",
//   },
//   tomorrow: {
//     low: lowTomorrow,
//     high: highTomorrow,
//     icon: tomorrowIcon = "https://www.flaticon.com/svg/static/icons/svg/2204/2204346.svg",
//   }
// } = forecast;
// ==================================================================================

// ==================================================================================
//Функция calculateMeanTemperature(forecast) принимает один параметр forecast - объект
// температур на два дня следующего формата.

// {
//   today: { low: 10, high: 20 },
//   tomorrow: { low: 20, high: 30 }
// }
// Замени объявления переменных todayLow, todayHigh, tomorrowLow и tomorrowHigh одной операцией
//  деструктуризации свойств объекта forecast.
// ----------------------------------------------------------------------------------
// function calculateMeanTemperature(forecast) {
//   //const todayLow = forecast.today.low;
//  // const todayHigh = forecast.today.high;
//  // const tomorrowLow = forecast.tomorrow.low;
// //  const tomorrowHigh = forecast.tomorrow.high;
//   const {
//     today:
//     {
//       low: todayLow,
//       high: todayHigh,
//     },
//         tomorrow:
//     {
//       low: tomorrowLow,
//       high: tomorrowHigh,
//     },
//   } = forecast;

//   // Change code above this line
//   return (todayLow + todayHigh + tomorrowLow + tomorrowHigh) / 4;
// }
// ==================================================================================

// ==================================================================================
//В переменной scores хранится массив результатов тестирования. Используя распыление
// и методы Math.max() и Math.min() дополни код так, чтобы в переменной bestScore был
// самый высокий балл, а в worstScore самый низкий.
// ----------------------------------------------------------------------------------
// const scores = [89, 64, 42, 17, 93, 51, 26];
// // Change code below this line
// const bestScore = Math.max(...scores);
// const worstScore = Math.min(...scores);
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================


// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================


// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
//
// ----------------------------------------------------------------------------------
// ==================================================================================

// ==================================================================================
// 
// ----------------------------------------------------------------------------------
// ==================================================================================